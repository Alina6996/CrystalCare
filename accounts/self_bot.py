import os
import sys
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# -------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django --------------------
PROJECT_ROOT = r"D:\Cosmetics\crystalcare"
sys.path.append(PROJECT_ROOT)
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "CrystalCare.settings")

import django
django.setup()

from shop.models import Order
from accounts.models import Profile  # —Ç–≤—ñ–π –∞–∫–∞—É–Ω—Ç—Å-–ø—Ä–æ—Ñ—ñ–ª—å
from accounts.bot_config import TELEGRAM_BOT_TOKEN

logging.basicConfig(level=logging.INFO)

# -------------------- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ --------------------
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üì¶ –í—ñ–¥—Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="status")],
        [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–≥—É–∫", callback_data="review")]
    ]
    return InlineKeyboardMarkup(keyboard)

def back_to_menu_keyboard():
    keyboard = [[InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è —É –º–µ–Ω—é", callback_data="menu")]]
    return InlineKeyboardMarkup(keyboard)

# -------------------- /start --------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:", reply_markup=main_menu_keyboard())

# -------------------- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ --------------------
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "status":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏ —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ø–æ—à—É–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
            reply_markup=back_to_menu_keyboard()
        )
        context.user_data["awaiting_status"] = True
        context.user_data["awaiting_review"] = False

    elif query.data == "review":
        await query.edit_message_text(
            "–í—ñ–¥–ø—Ä–∞–≤ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ –ø—Ä—è–º–æ —É —á–∞—Ç. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤—ñ–Ω –∑–±–µ—Ä–µ–∂–µ—Ç—å—Å—è.",
            reply_markup=back_to_menu_keyboard()
        )
        context.user_data["awaiting_review"] = True
        context.user_data["awaiting_status"] = False

    elif query.data == "menu":
        await query.edit_message_text(
            "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )
        context.user_data["awaiting_review"] = False
        context.user_data["awaiting_status"] = False

# -------------------- –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å --------------------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if context.user_data.get("awaiting_status"):
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Ñ—ñ–ª—ñ, –¥–µ full_name –∞–±–æ phone –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç
        profiles = Profile.objects.filter(full_name__icontains=text) | Profile.objects.filter(phone__icontains=text)
        orders_text = ""

        for profile in profiles:
            user_orders = Order.objects.filter(user=profile.user).order_by("-created_at")
            for order in user_orders:
                orders_text += (
                    f"üìå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}\n"
                    f"üïí –°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n"
                    f"üí∞ –°—É–º–∞: {order.total_price} –≥—Ä–Ω\n\n"
                )

        if not orders_text:
            orders_text = "‚ùå –ó–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

        await update.message.reply_text(orders_text, reply_markup=back_to_menu_keyboard())
        context.user_data["awaiting_status"] = False

    elif context.user_data.get("awaiting_review"):
        await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! ‚ù§Ô∏è", reply_markup=main_menu_keyboard())
        context.user_data["awaiting_review"] = False

    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –¥—ñ—é —á–µ—Ä–µ–∑ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

# -------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ --------------------
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! ‚úÖ")
    app.run_polling()
